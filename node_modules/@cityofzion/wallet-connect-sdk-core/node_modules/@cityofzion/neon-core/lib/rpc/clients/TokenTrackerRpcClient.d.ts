import { Query, GetNep17BalancesResult, GetNep17TransfersResult, GetNep11TransfersResult, GetNep11BalancesResult } from "../Query";
import { RpcDispatcher, RpcDispatcherMixin } from "./RpcDispatcher";
export declare function TokenTrackerRpcMixin<TBase extends RpcDispatcherMixin>(base: TBase): {
    new (...args: any[]): {
        getNep17Transfers(accountIdentifier: string, startTime?: string, endTime?: string): Promise<GetNep17TransfersResult>;
        getNep17Balances(accountIdentifier: string): Promise<GetNep17BalancesResult>;
        getNep11Transfers(accountIdentifier: string, startTime?: string, endTime?: string): Promise<GetNep11TransfersResult>;
        getNep11Balances(accountIdentifier: string): Promise<GetNep11BalancesResult>;
        url: string;
        execute<TResponse>(query: Query<import("../Query").JsonRpcParams, TResponse>, config?: import("./RpcDispatcher").RpcConfig | undefined): Promise<TResponse>;
        executeAll<TResponses extends unknown[]>(batchQuery: import("..").BatchQuery<import("../Query").JsonRpcParams[], TResponses>, config?: import("./RpcDispatcher").RpcConfig | undefined): Promise<TResponses>;
        executeAll<TResponses_1 extends unknown[]>(batchQuery: Query<import("../Query").JsonRpcParams, unknown>[], config?: import("./RpcDispatcher").RpcConfig | undefined): Promise<TResponses_1>;
    };
} & TBase;
declare const TokenTrackerRpcClient_base: {
    new (...args: any[]): {
        getNep17Transfers(accountIdentifier: string, startTime?: string | undefined, endTime?: string | undefined): Promise<GetNep17TransfersResult>;
        getNep17Balances(accountIdentifier: string): Promise<GetNep17BalancesResult>;
        getNep11Transfers(accountIdentifier: string, startTime?: string | undefined, endTime?: string | undefined): Promise<GetNep11TransfersResult>;
        getNep11Balances(accountIdentifier: string): Promise<GetNep11BalancesResult>;
        url: string;
        execute<TResponse>(query: Query<import("../Query").JsonRpcParams, TResponse>, config?: import("./RpcDispatcher").RpcConfig | undefined): Promise<TResponse>;
        executeAll<TResponses extends unknown[]>(batchQuery: import("..").BatchQuery<import("../Query").JsonRpcParams[], TResponses>, config?: import("./RpcDispatcher").RpcConfig | undefined): Promise<TResponses>;
        executeAll<TResponses_1 extends unknown[]>(batchQuery: Query<import("../Query").JsonRpcParams, unknown>[], config?: import("./RpcDispatcher").RpcConfig | undefined): Promise<TResponses_1>;
    };
} & typeof RpcDispatcher;
export declare class TokenTrackerRpcClient extends TokenTrackerRpcClient_base {
    get [Symbol.toStringTag](): string;
}
export {};
//# sourceMappingURL=TokenTrackerRpcClient.d.ts.map