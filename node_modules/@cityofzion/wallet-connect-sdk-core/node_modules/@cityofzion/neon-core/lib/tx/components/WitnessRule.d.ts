import { NeonLike } from "../../internal";
import { NeonSerializable, StringStream } from "../../u";
import { WitnessCondition, WitnessConditionJson } from "./WitnessCondition";
export declare enum WitnessRuleAction {
    Deny = 0,
    Allow = 1
}
export interface WitnessRuleJson {
    action: string;
    condition: WitnessConditionJson;
}
export type WitnessRuleLike = NeonLike<WitnessRule, WitnessRuleJson>;
export declare class WitnessRule implements NeonSerializable {
    action: WitnessRuleAction;
    condition: WitnessCondition;
    get size(): number;
    static deserialize(ss: StringStream): WitnessRule;
    static fromJson(input: WitnessRuleJson): WitnessRule;
    constructor(input?: Partial<WitnessRuleLike>);
    serialize(): string;
    toJson(): WitnessRuleJson;
}
//# sourceMappingURL=WitnessRule.d.ts.map