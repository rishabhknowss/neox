{"version":3,"file":"index.es.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.com\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\"wc_sessionPropose\", \"wc_sessionRequest\", \"wc_authRequest\"];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","import {\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isBrowser,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    await this.isInitialized();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      ...(sessionProperties && { sessionProperties }),\n    };\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n    this.events.once<\"session_connect\">(\n      engineEvent(\"session_connect\"),\n      async ({ error, session }) => {\n        if (error) reject(error);\n        else if (session) {\n          session.self.publicKey = publicKey;\n          const completeSession = {\n            ...session,\n            requiredNamespaces: proposal.requiredNamespaces,\n            optionalNamespaces: proposal.optionalNamespaces,\n          };\n          await this.client.session.set(session.topic, completeSession);\n          await this.setExpiry(session.topic, session.expiry);\n          if (topic) {\n            await this.client.core.pairing.updateMetadata({\n              topic,\n              metadata: session.peer.metadata,\n            });\n          }\n          resolve(completeSession);\n        }\n      },\n    );\n    const id = await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n    });\n    await this.setProposal(id, { id, ...proposal });\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      throw error;\n    }\n    const { id, relayProtocol, namespaces, sessionProperties, sessionConfig } = params;\n    let proposal;\n    try {\n      proposal = this.client.proposal.get(id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    let { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n    pairingTopic = pairingTopic || \"\";\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      pairingTopic,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    await this.client.core.relayer.subscribe(sessionTopic);\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n    };\n    await this.client.session.set(sessionTopic, session);\n    try {\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      });\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      });\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () =>\n        new Promise((resolve) =>\n          setTimeout(() => resolve(this.client.session.get(sessionTopic)), 5_00),\n        ), // artificial delay to allow for the session to be processed by the peer\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    await this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: \"wc_sessionRequest\",\n          params: {\n            request: {\n              ...request,\n              expiryTimestamp: calcExpiry(expiry),\n            },\n            chainId,\n          },\n          expiry,\n          throwOnFailedPublish: true,\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          );\n          handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({ id, topic, result: response.result, throwOnFailedPublish: true });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic);\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        session.self.publicKey = publicKey;\n        await this.client.session.set(session.topic, session);\n        await this.setExpiry(session.topic, session.expiry);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: session.peer.metadata,\n          });\n        }\n        const sessionObject = this.client.session.get(session.topic);\n        await this.deleteProposal(fallbackId);\n        resolve({\n          session: sessionObject,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(id, { message: \"fulfilled\", code: 0 });\n\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(fallbackId);\n      // cleanup listener for fallback response\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic);\n        await this.client.session.set(sessionTopic, session);\n\n        session = this.client.session.get(sessionTopic);\n      }\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // set the ids for both requests\n    const id = payloadId();\n    const fallbackId = payloadId();\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(engineEvent(\"session_connect\"), onSessionConnect);\n    this.events.once(engineEvent(\"session_request\", id), onAuthenticate);\n\n    try {\n      // send both (main & fallback) requests\n      await Promise.all([\n        this.sendRequest({\n          topic: pairingTopic,\n          method: \"wc_sessionAuthenticate\",\n          params: request,\n          expiry: params.expiry,\n          throwOnFailedPublish: true,\n          clientRpcId: id,\n        }),\n        this.sendRequest({\n          topic: pairingTopic,\n          method: \"wc_sessionPropose\",\n          params: proposal,\n          expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n          throwOnFailedPublish: true,\n          clientRpcId: fallbackId,\n        }),\n      ]);\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(fallbackId, { id: fallbackId, ...proposal });\n    await this.setAuthRequest(id, {\n      request: { ...request, verifyContext: {} as any },\n      pairingTopic,\n    });\n\n    return {\n      uri: connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    this.isInitialized();\n\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: \"\",\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n      };\n\n      await this.client.core.relayer.subscribe(sessionTopic);\n      await this.client.session.set(sessionTopic, session);\n    }\n\n    await this.sendResult<\"wc_sessionAuthenticate\">({\n      topic: responseTopic,\n      id,\n      result: {\n        cacaos: auths,\n        responder: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n      },\n      encodeOpts,\n      throwOnFailedPublish: true,\n    });\n    await this.client.auth.requests.delete(id, { message: \"fullfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    await this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    // set the requestQueue state to idle if expirer has deleted a request as trying to respond to it would result in an exception\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const { topic, method, params, expiry, relayRpcId, clientRpcId, throwOnFailedPublish } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n    if (isBrowser() && METHODS_TO_VERIFY.includes(method)) {\n      const hash = hashMessage(JSON.stringify(payload));\n      this.client.core.verify.register({ attestationId: hash });\n    }\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload);\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n    if (throwOnFailedPublish) {\n      opts.internal = {\n        ...opts.internal,\n        throwOnFailedPublish: true,\n      };\n      await this.client.core.relayer.publish(topic, message, opts);\n    } else {\n      this.client.core.relayer\n        .publish(topic, message, opts)\n        .catch((error) => this.client.logger.error(error));\n    }\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[record.request.method].res;\n    if (throwOnFailedPublish) {\n      opts.internal = {\n        ...opts.internal,\n        throwOnFailedPublish: true,\n      };\n      await this.client.core.relayer.publish(topic, message, opts);\n    } else {\n      this.client.core.relayer\n        .publish(topic, message, opts)\n        .catch((error) => this.client.logger.error(error));\n    }\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[record.request.method].res;\n    // await is intentionally omitted to speed up performance\n    this.client.core.relayer.publish(topic, message, opts);\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private async isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(\n      RELAYER_EVENTS.message,\n      async (event: RelayerTypes.MessageEvent) => {\n        const { topic, message } = event;\n\n        // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n        const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n          ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n          : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n        const payload = await this.client.core.crypto.decode(topic, message, {\n          receiverPublicKey: publicKey,\n        });\n\n        try {\n          if (isJsonRpcRequest(payload)) {\n            this.client.core.history.set(topic, payload);\n            this.onRelayEventRequest({ topic, payload });\n          } else if (isJsonRpcResponse(payload)) {\n            await this.client.core.history.resolve(payload);\n            await this.onRelayEventResponse({ topic, payload });\n            this.client.core.history.delete(topic, payload.id);\n          } else {\n            this.onRelayEventUnknownPayload({ topic, payload });\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      },\n    );\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        this.processRequest(request);\n        // small delay to allow for any async tasks to complete\n        await new Promise((resolve) => setTimeout(resolve, 300));\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = (event) => {\n    const { topic, payload } = event;\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeRequest(topic, payload);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequest(topic, payload);\n      case \"wc_sessionEvent\":\n        return this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateRequest(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n      const hash = hashMessage(JSON.stringify(payload));\n      const verifyContext = await this.getVerifyContext(hash, proposal.proposer.metadata);\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        sessionTopic,\n      });\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic);\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const {\n        relay,\n        controller,\n        expiry,\n        namespaces,\n        sessionProperties,\n        pairingTopic,\n        sessionConfig,\n      } = payload.params;\n      const session = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        controller: controller.publicKey,\n        self: {\n          publicKey: \"\",\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(sessionConfig && { sessionConfig }),\n      };\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 997`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { session });\n      this.cleanupDuplicatePairings(session);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return parseInt(currentId.toString().slice(0, -3)) <= parseInt(lastId.toString().slice(0, -3));\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      await Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]);\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (topic, payload) => {\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const hash = hashMessage(\n        JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id)),\n      );\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext(hash, session.peer.metadata);\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { requester, authPayload, expiryTimestamp } = payload.params;\n    const hash = hashMessage(JSON.stringify(payload));\n    const verifyContext = await this.getVerifyContext(hash, this.client.metadata);\n    const pendingRequest = {\n      requester,\n      pairingTopic: topic,\n      id: payload.id,\n      authPayload,\n      verifyContext,\n      expiryTimestamp,\n    };\n    await this.setAuthRequest(payload.id, { request: pendingRequest, pairingTopic: topic });\n    this.client.events.emit(\"session_authenticate\", {\n      topic,\n      params: payload.params,\n      id: payload.id,\n    });\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest(\n      pairing.topic,\n      formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n        },\n        proposal.id,\n      ),\n    );\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (hash: string, metadata: CoreTypes.Metadata) => {\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      const result = await this.client.core.verify.resolve({\n        attestationId: hash,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.info(e);\n    }\n\n    this.client.logger.info(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\n    Object.values(properties).forEach((property) => {\n      if (!isValidString(property, false)) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(public core: ICore, public logger: Logger) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { getAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = opts?.metadata || getAppMetadata();\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params) => {\n    try {\n      return await this.engine.authenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.engine.init();\n      await this.auth.init();\n      this.core.verify.init({ verifyUrl: this.metadata.verifyUrl });\n      this.logger.info(`SignClient Initialization Success`);\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","engineEvent","session","completeSession","id","relayProtocol","namespaces","sessionConfig","proposer","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","getSdkError","reason","acknowledged","clientRpcId","payloadId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","_a","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","event","isSessionCompatible","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","onSessionConnect","onAuthenticate","sessionObject","fallbackId","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","sessionAuthenticateResponseParams","auths","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","pairing","duplicates","p","_b","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","formatJsonRpcRequest","isBrowser","METHODS_TO_VERIFY","hash","hashMessage","opts","formatJsonRpcResult","record","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","reqMethod","resMethod","requestMethod","expectedMethods","err","subscriptionId","target","relay","controller","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","metadata","context","VERIFY_SERVER","properties","property","i","numItemsToDelete","k","deletedRecord","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}