import SignClient from '@walletconnect/sign-client';
import { SessionTypes, SignClientTypes } from '@walletconnect/types';
import { GetVersionResult } from '@cityofzion/neon-core/lib/rpc';
import { Neo3Signer, SignMessagePayload, SignedMessage, ContractInvocationMulti, Neo3Invoker, RpcResponseStackItem, EncryptedPayload, InvokeResult, DecryptFromArrayResult, BuiltTransaction, CalculateFee } from '@cityofzion/neon-dappkit-types';
import TypedEventEmitter from 'typed-emitter';
export type CoreEvents = {
    session(sessions: SessionTypes.Struct | null): void | Promise<void>;
};
export type Blockchain = 'neo3';
export type Chain = 'private' | 'testnet' | 'mainnet';
export type NetworkType = `${Blockchain}:${Chain}`;
export type Method = 'invokeFunction' | 'testInvoke' | 'signMessage' | 'verifyMessage' | 'traverseIterator' | 'getWalletInfo' | 'getNetworkVersion' | 'encrypt' | 'decrypt' | 'decryptFromArray' | 'calculateFee' | 'signTransaction' | 'wipeRequests' | 'withContext';
export declare const COMPATIBILITY_VERSION: number;
export declare const SUPPORTED_BLOCKCHAINS: Blockchain[];
export declare const DEFAULT_BLOCKCHAIN: Blockchain;
export declare const SUPPORTED_NETWORKS: NetworkType[];
export declare const DEFAULT_AUTO_ACCEPT_METHODS: Method[];
export declare class WcSdkError extends Error {
    payload: unknown;
    constructor(payload: unknown);
}
export type WalletInfo = {
    isLedger: boolean;
};
export type NetworkVersion = GetVersionResult & {
    rpcAddress: string;
};
declare class WcSdk implements Neo3Invoker, Neo3Signer {
    signClient: SignClient;
    private _session;
    private contextualMessage;
    private sendRequest;
    readonly emitter: TypedEventEmitter<CoreEvents>;
    constructor(client: SignClient, initSession?: SessionTypes.Struct);
    get session(): SessionTypes.Struct | null;
    set session(session: SessionTypes.Struct | null);
    static init(options: SignClientTypes.Options, initSession?: SessionTypes.Struct): Promise<WcSdk>;
    isConnected(): boolean;
    getChainId(): NetworkType | string | null;
    getAccountAddress(): string | null;
    private getAccountInfo;
    manageDisconnect(): void;
    loadSession(): SessionTypes.Struct | null;
    manageSession(): Promise<SessionTypes.Struct | null>;
    connect(network: NetworkType, methods: Method[]): Promise<SessionTypes.Struct>;
    createConnection(network: NetworkType, methods: Method[]): Promise<{
        uri?: string;
        approval: () => Promise<SessionTypes.Struct>;
    }>;
    disconnect(): Promise<void>;
    signTransaction(params: ContractInvocationMulti | BuiltTransaction): Promise<BuiltTransaction>;
    invokeFunction(params: ContractInvocationMulti): Promise<string>;
    calculateFee(params: ContractInvocationMulti): Promise<CalculateFee>;
    testInvoke(params: ContractInvocationMulti): Promise<InvokeResult>;
    signMessage(params: SignMessagePayload): Promise<SignedMessage>;
    verifyMessage(params: SignedMessage): Promise<boolean>;
    traverseIterator(sessionId: string, iteratorId: string, count: number): Promise<RpcResponseStackItem[]>;
    getWalletInfo(): Promise<WalletInfo>;
    getNetworkVersion(): Promise<NetworkVersion>;
    encrypt(message: string, publicKeys: string[]): Promise<EncryptedPayload[]>;
    decrypt(payload: EncryptedPayload): Promise<string>;
    decryptFromArray(payloads: EncryptedPayload[]): Promise<DecryptFromArrayResult>;
    wipeRequests(): Promise<string[]>;
    withContext(contextualMessage: string): WcSdk;
    private validateContractInvocationMulti;
    private objectValidation;
}
export { WcSdk };
export default WcSdk;
export * from '@cityofzion/neon-dappkit-types';
