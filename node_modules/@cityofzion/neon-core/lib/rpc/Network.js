import Protocol from "./Protocol";
function compareStrings(a, b) {
    if (a.length !== b.length)
        return false;
    return a.every((curr) => b.indexOf(curr) >= 0);
}
function compareMaps(a, b) {
    const keys = Array.from(a.keys ?? []);
    if (!compareStrings(keys, Array.from(b.keys ?? [])))
        return false;
    return keys.every((key) => a[key] === b[key]);
}
/**
 * Network interface representing a NEO blockchain network.
 * This inherits from the network.protocol file used in the C# implementation and adds in additional configurations.
 * @param config - NetworkLike JS object
 */
export class Network {
    constructor(config = {}, name = null) {
        this.name = config.Name || config.name || name || "RandomNet";
        const protocolLike = Object.assign({}, config.protocol || config.ProtocolConfiguration || {});
        this.protocol = new Protocol(protocolLike);
        this.nodes = config.Nodes || config.nodes || [];
        this.extra = Object.assign({}, config.ExtraConfiguration || config.extra || {});
    }
    /**
     * Exports the class as a JSON format.
     */
    export() {
        return {
            name: this.name,
            protocol: this.protocol.export(),
            extra: this.extra,
            nodes: this.nodes,
        };
    }
    /**
     * Exports using PascalCase convention for keys.
     */
    toConfiguration() {
        return {
            Name: this.name,
            ProtocolConfiguration: this.protocol.toConfiguration(),
            ExtraConfiguration: this.extra,
            Nodes: this.nodes,
        };
    }
    equals(other) {
        return (this.name === other.name &&
            this.protocol.equals(other.protocol ?? {}) &&
            compareStrings(this.nodes, other.nodes ?? []) &&
            compareMaps(this.extra, other.extra ?? {}));
    }
}
export default Network;
//# sourceMappingURL=Network.js.map